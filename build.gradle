buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id "org.asciidoctor.convert" version "1.5.2"
    id 'org.springframework.boot' version '1.5.2.RELEASE'
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'

war {
	baseName = 'rest-api'
	version = '0.0.1-SNAPSHOT'
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
//	compile('org.springframework.boot:spring-boot-starter-aop')
//	compile('org.springframework.boot:spring-boot-starter-cache')
//	compile('org.springframework.boot:spring-boot-starter-data-rest')
//	compile('org.springframework.boot:spring-boot-starter-hateoas')
//	compile('org.liquibase:liquibase-core')
//    compile('org.mybatis:mybatis')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.2.0')
    compile('mysql:mysql-connector-java')
//    compile('org.springframework.boot:spring-boot-starter-jdbc') {
//        exclude(module: 'tomcat-jdbc')
//    }
//    compile('com.zaxxer:HikariCP:2.6.0'){
//        exclude(module: 'tools')
//    }
//	compile('org.springframework.retry:spring-retry')
//	compile('org.springframework.boot:spring-boot-starter-security')
//	compile('org.springframework.session:spring-session')
//	compile('org.springframework.boot:spring-boot-starter-validation')
	compile('org.springframework.boot:spring-boot-starter-web')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('com.h2database:h2')
//	compileOnly('org.springframework.boot:spring-boot-configuration-processor')
//	compileOnly('org.projectlombok:lombok')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')
//    testCompile('org.mybatis.spring.boot:mybatis-spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir(snippetsDir)
    dependsOn test
}

